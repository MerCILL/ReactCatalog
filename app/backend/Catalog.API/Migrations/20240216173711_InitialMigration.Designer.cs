// <auto-generated />
using System;
using Catalog.API.DataAccess.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Catalog.API.Migrations
{
    [DbContext(typeof(CatalogDbContext))]
    [Migration("20240216173711_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Catalog.API.DataAccess.Entities.BrandEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Brand", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Nike"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Jordan"
                        });
                });

            modelBuilder.Entity("Catalog.API.DataAccess.Entities.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("TypeId");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CreatedAt = new DateTime(2024, 2, 16, 17, 37, 11, 390, DateTimeKind.Utc).AddTicks(6748),
                            PictureUrl = "nike-air-max-97-lightblue.png",
                            Price = 100m,
                            Title = "Nike Air Max 97",
                            TypeId = 2
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            CreatedAt = new DateTime(2024, 2, 16, 17, 37, 11, 390, DateTimeKind.Utc).AddTicks(6751),
                            PictureUrl = "nike-air-max-pulse-drift-red.png",
                            Price = 150m,
                            Title = "Nike Air Max Pulse Drift",
                            TypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 2,
                            CreatedAt = new DateTime(2024, 2, 16, 17, 37, 11, 390, DateTimeKind.Utc).AddTicks(6753),
                            PictureUrl = "air-jordan-13-retro-bluegrey.png",
                            Price = 200m,
                            Title = "Air Jordan 13 Retro",
                            TypeId = 2
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 2,
                            CreatedAt = new DateTime(2024, 2, 16, 17, 37, 11, 390, DateTimeKind.Utc).AddTicks(6754),
                            PictureUrl = "miami-heat-courtside-statement-edition.png",
                            Price = 80m,
                            Title = "Miami Hear Courtside Statement Edition",
                            TypeId = 1
                        });
                });

            modelBuilder.Entity("Catalog.API.DataAccess.Entities.TypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Type", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Hoodie"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Shoes"
                        });
                });

            modelBuilder.Entity("Catalog.API.DataAccess.Entities.ProductEntity", b =>
                {
                    b.HasOne("Catalog.API.DataAccess.Entities.BrandEntity", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Catalog.API.DataAccess.Entities.TypeEntity", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Type");
                });
#pragma warning restore 612, 618
        }
    }
}
